*Exercise 2.22:* Louis Reasoner tries to rewrite the first
`square-list' procedure of *Note Exercise 2-21:: so that it
evolves an iterative process:

#+begin_src scheme
  (define (square-list items)
    (define (iter things answer)
      (if (null? things)
	  answer
	  (iter (cdr things)
		(cons (square (car things))
		      answer))))
    (iter items nil))
#+end_src

Unfortunately, defining `square-list' this way produces the answer
list in the reverse order of the one desired.  Why?

- Because `cons' adds items to the front of the `answer' list.

Louis then tries to fix his bug by interchanging the arguments to
`cons':

#+begin_src scheme
  (define (square-list items)
    (define (iter things answer)
      (if (null? things)
	  answer
	  (iter (cdr things)
		(cons answer
		      (square (car things))))))
    (iter items nil))
#+end_src
          

This doesn't work either.  Explain.

- `answer' is a list, so this has the effect of adding the LIST of
  answers before the item... resulting in an ugly looking cons chain.
