*Exercise 2.38:* The `accumulate' procedure is also known as
`fold-right', because it combines the first element of the
sequence with the result of combining all the elements to the
right.  There is also a `fold-left', which is similar to
`fold-right', except that it combines elements working in the
opposite direction:

#+header: :session
#+begin_src scheme
  (define (fold-right op initial sequence)
    (if (null? sequence)
	initial
	(op (car sequence)
	    (fold-right op initial (cdr sequence)))))

  (define (fold-left op initial sequence)
      (define (iter result rest)
	(if (null? rest)
	    result
	    (iter (op result (car rest))
		  (cdr rest))))
      (iter initial sequence))
#+end_src

#+RESULTS:
: #<unspecified>

What are the values of

#+header: :session
#+begin_src scheme
  (fold-right / 1 (list 1 2 3))

  (fold-left / 1 (list 1 2 3))

  (fold-right list '() (list 1 2 3))

  (fold-left list '() (list 1 2 3))
#+end_src

#+RESULTS:
| ((nil 1) 2) | 3 |

Give a property that `op' should satisfy to guarantee that
`fold-right' and `fold-left' will produce the same values for any
sequence.

We require op to be commutative.

But is that all?

Consider rock paper scissors, which is trivally commutative, but is
not associative.

(This function is the game of RPS)
$$*:\{r,p,s\}\times \{r,p,s\} \rightarrow \{r,p,s\}$$ such that:

You can read this as:
| * | r | p | s |
| r | r | p | r |
| p | p | p | s |
| s | r | s | s |


If we were to fold-left/right a game of rock-paper-scissors
(represented as a list), we would get (assume that we have some
sentinel value "x" such that y vs "x" yields the y for all y):

#+begin_src scheme
  (fold-right rps x '(r p s))
  ;; (r * p) * s = p * s = s
  (fold-right rps x '(r p s))
  ;; (s * p) * r = s * r = r
#+end_src

This clearly shows that commutativity is not enough. We also need
associativity.
